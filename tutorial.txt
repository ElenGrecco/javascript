# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
___________________________________________________________________________

Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados
_______________________________________________________________________________

MANDAMENTOS DA PROGRAMAÇÃO
1) UX (User experience) - desenvolver sempre pensando na experiência do usuário.
2) Usar o mínimo possível de código (variáveis, operadores, comparadores, estruturas de controle, etc)
para resolver o problema (lembrar do marcapasso).
3) Entender o problema, não adianta sentar na frente do PC, se vc não sabe como resolver o problema.
Algorítimo -> Saber fazer a ("receita do bolo")
Conceito:
           variáveis
entrada - processamento - saída


________________________________________________________________________________


GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositorio local)
git add .  (adiciona ao repositóro local)
git add *  (adiciona todos os repositórios) 
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (sincroniza as informações de repositório) no PC

_______________________________________________________________________________

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

_______________________________________________________________________________

Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição da classe / função
    @author Elen Grecco
    @version 1.0
*/

2) Nome de arquivos, variáveis, funções, classes, etc.
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
- só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo 
(camel case)
nomecliente -> nomeCliente

________________________________________________________________________________

Comandos Básicos do MS-dos
cls-> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretórios
cd .. -> voltar para o diretório anterior

________________________________________________________________________________

Node - Plataforma que permite a execução do JavaScript fora do navegador (browser)
https://nodejs.org/ ( baixar sempre a versão LTS)

Comandos básicos:
node -v (para verificar a versão)

_______________________________________________________________________________

Gerenciador de pacotes para o node
mpm está relacionado a pasta do projeto, ou seja, os pacotes são instalados na raiz dos projetos e não no sistema operacional


npm -v (verificar versão do npm)
npm ls (listar pacotes instalados)
npm init ( iniciar um novo projeo JavaScript)
    |____ package.json

    npm i nome_do_pacote (instalar um novo pacote)
    npm r nome_do_pacote (remover um pacote)
    

json (javaScript Objet Notation)    



Variáveis e Constantes

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, 
ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, 
facilitando a manutenção do código.

Nas linguagens de programação as variáveis são tipadas ou dunâmicamente tipadas

Existem 3 tipos de variáveis:
String -> Armazena caracteres e númenros 
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante 
a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme 
o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

--------------------------------------------------------------------------------------

Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> Criar (declarar) uma constante
let -> criar (declarar) uma variável
typeof() -> verificar o tipo de variável

!!!!!ATENÇÃO!!!!
No JavaScript uma variável pode ser criada usando let ou var.
var (obsoleto e inseguro), usar sempre o let!!!

_______________________________________________________________

Lição de casa.

1) Cálculo do volume de um aquário:
Crie um programa que calcule o volume de um aquário. O usuário deve inserir o 
comprimento, a largura e a altura do aquário. O programa deve calcular o volume 
e exibir o resultado em litros.
R:  // variáveis (serão necessários 4 variáveis)
    comprimento, largura, altura, volume

    //entrada   
    comprimento, largura, altura
    
    //processamento 
    volume = comprimento * largura * altura / 1000

    //saída
    volume

________________________________________________________________________________

2) Cálculo do consumo de combustível:
Desenvolva um programa que calcule o consumo médio de combustível de um carro. 
O usuário deve inserir a distância percorrida e a quantidade de combustível 
consumido. O programa deve calcular e exibir o consumo médio (km/l).
R:  // variáveis (serão necessários 3 variáveis)
    distancia, litros, consumo

    // entrada
    distancia, litros

    // processamento
    consumo = distancia / litros

    // saída
    consumo

3) Cálculo da área de um terreno:
Desenvolva um programa que calcule a área de um terreno retangular. O usuário deve fornecer o comprimento e a largura do terreno, e o programa deve calcular a área em metros quadrados.

4) Cálculo da Conversão de Real para Dólar:
Desenvolva um programa que calcule o valor em dólares (US$) a partir de uma quantia em reais (R$), utilizando uma taxa de câmbio informada pelo usuário.

5) Cálculo do tempo de viagem:
Desenvolva um programa que calcule o tempo necessário para uma viagem. O usuário deve fornecer a distância a ser percorrida e a velocidade média do veículo. O programa deve calcular e exibir o tempo de viagem.

6) Cálculo do valor de uma corrida de taxi:
Desenvolva um programa que calcule o valor de uma corrida de táxi. O usuário deve fornecer a distância percorrida (km) e o valor fixo por quilômetro. O programa deve calcular e exibir o valor total da corrida.

7) Cálculo do valor da conta de luz:
Desenvolva um programa que calcule o valor da conta de luz de uma residência. O usuário deve fornecer o consumo em kWh e o valor da tarifa por kWh. O programa deve calcular e exibir o valor da conta.

8) Cálculo do troco:
Desenvolva um programa que calcule o troco que um cliente deve receber após uma compra. O usuário deve fornecer o valor da compra e o valor pago. O programa deve calcular e exibir o valor do troco.

9) Cálculo da quantidade de tijolos:
Desenvolva um programa que calcule a quantidade de tijolos necessários para construir uma parede. O usuário deve fornecer as dimensões da parede e as dimensões de um tijolo. O programa deve calcular e exibir o número de tijolos necessários.

10) Cálculo do tempo de viagem:
Desenvolva um programa que calcule o tempo necessário para uma viagem. O usuário deve fornecer a distância a ser percorrida e a velocidade média do veículo. O programa deve calcular e exibir o tempo de viagem.

11) Cálculo da área de um triângulo:
Crie um programa que calcule a área de um triângulo, dada sua base e altura.

12) Conversão de milhas para quilômetros:
Desenvolva um programa que converta uma distância em milhas para quilômetros.

13) Cálculo da quantidade de latas de tinta:
Desenvolva um programa que calcule a quantidade de latas de tinta necessárias para pintar uma parede, dado o tamanho da parede (em m²) e o rendimento da lata (em m² por lata).

14) Cálculo do custo por quilômetro rodado:
Desenvolva um programa que calcule o custo por quilômetro rodado, dado o custo total da viagem e a distância percorrida.

15) Cálculo do consumo diário de água:
Crie um programa que calcule a quantidade de água recomendada por dia para uma pessoa, baseado no seu peso. 

16) Cálculo da porcentagem de um valor:
Desenvolva um programa que calcule uma porcentagem de um valor, dado o valor total
 e o percentual.
 R:
 Regra de 3:

10% de 200 = 20

200 ------ 100%
valor ----  10%

valor x 100 = 200 x 10

         200 x 10       2000
valor = ___________ =  ______ = 20
            100          100


x% de y = valor

Y --------- 100%
valor ----   X

valor x 100 = Y x X

         Y x X    
valor = ________ 
          100    

// variáveis
x, y, valor

// entrada
x, y

// processamento
valor = (x * y) / 100

// saída
valor

17) Cálculo de desconto em uma compra:
Desenvolva um programa que calcule o valor final de um produto após um desconto. O usuário deve inserir o preço original e o percentual de desconto. O programa deve calcular e exibir o valor final.




