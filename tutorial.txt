# Lógica de programação

# Photshop

# front-end
- HTML5 e CSS3
- UX UI
- JavaScript
- Frameworks (bootstrap)
- CMS (wordpress)

# banco de dados

# sistemas desktop
electron

# back-end (Java ou php)

# testes

# pi
___________________________________________________________________________

Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados
_______________________________________________________________________________

MANDAMENTOS DA PROGRAMAÇÃO
1) UX (User experience) - desenvolver sempre pensando na experiência do usuário.
2) Usar o mínimo possível de código (variáveis, operadores, comparadores, estruturas de controle, etc)
para resolver o problema (lembrar do marcapasso).
3) Entender o problema, não adianta sentar na frente do PC, se vc não sabe como resolver o problema.
Algorítimo -> Saber fazer a ("receita do bolo")
Conceito:
           variáveis
entrada - processamento - saída


________________________________________________________________________________


GIT e GITHUB

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositorio local)
git add .  (adiciona ao repositóro local)
git add *  (adiciona todos os repositórios) 
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (sincroniza as informações de repositório) no PC

_______________________________________________________________________________

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

_______________________________________________________________________________

Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição da classe / função
    @author Elen Grecco
    @version 1.0
*/

2) Nome de arquivos, variáveis, funções, classes, etc.
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
- só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo 
(camel case)
nomecliente -> nomeCliente

________________________________________________________________________________

Comandos Básicos do MS-dos
cls-> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretórios
cd .. -> voltar para o diretório anterior

________________________________________________________________________________

Node - Plataforma que permite a execução do JavaScript fora do navegador (browser)
https://nodejs.org/ ( baixar sempre a versão LTS)

Comandos básicos:
node -v (para verificar a versão)

_______________________________________________________________________________

Gerenciador de pacotes para o node
mpm está relacionado a pasta do projeto, ou seja, os pacotes são instalados na raiz dos projetos e não no sistema operacional


npm -v (verificar versão do npm)
npm ls (listar pacotes instalados)
npm init ( iniciar um novo projeo JavaScript)
    |____ package.json

    npm i nome_do_pacote (instalar um novo pacote)
    npm r nome_do_pacote (remover um pacote)
    

json (javaScript Objet Notation)    



Variáveis e Constantes

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, 
ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, 
facilitando a manutenção do código.

Nas linguagens de programação as variáveis são tipadas ou dunâmicamente tipadas

Existem 3 tipos de variáveis:
String -> Armazena caracteres e númenros 
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante 
a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme 
o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

--------------------------------------------------------------------------------------

Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> Criar (declarar) uma constante
let -> criar (declarar) uma variável
typeof() -> verificar o tipo de variável

!!!!!ATENÇÃO!!!!
No JavaScript uma variável pode ser criada usando let ou var.
var (obsoleto e inseguro), usar sempre o let!!!

_____________________________________________________________________________________

Estruturas de controle
- condicionais
- laços de repetições


Estruturas de controle condicionais

if (Condição) {
    //condição verdadeira
}



if (condição) {
    //condição verdadeira
}else {
    //condição falsa
}

if (condição 1) {
    //condição verdadeira
}else if (condição 2) {
    //condição 2 verdadeira
}else {
    //condição falsa    
}

Obs: Nesta estrutura o "else" é opcional, porém se indicado caso não nenhuma condição for verdadeira, ele
obrigatóriamente executrá oq estiver no else.

switch case (uso de variável numérica (número inteiro))

swicth (variável) {
    case 1:
        //código caso o valor da variavel seja 1
        break
    case 2:    
        //código caso o valor da variavel seja 2
        break
    default:
        //opcional, o código será executado se nenhum caso for definido
        break

}

Observações:
1) Uma condição nunca pode ser verdadeira e falsa simultaneamente.
2) No uso do if-else sempre uma das condições será processada.

Estruturas de controle - Laços de repetições

for (let i = 1; i <10; i++) {
    // o código aqui dentro será repetido enquanto a condição for verdadeira
}

//Laço com número de repetições definidas (sempre é número inteiro o laço for, pois existem 3 laços que veremos no futuro)
//let i = (ninício)
//i < 10 (condição)
//i++ (incremento) i-- (decremento)

Uso do laço for
1) MUITOOO IMPORTANTE! Percorrer uma estrutura de dados (Importante) é o maior uso do laço for!!!
2) Simplificar o código (reduzir o código, economia em tudo, energia por exemplo)
3) Fazer cálculos levando em conta a variável interna do laço

while (condição) {
 //condição verdadeira
}
   
do {
    //executa o código uma vez independente da condição e depois analisa a condição

}while (condição)

Obs: Az estrutura while ou do-while são estruturas de repetições infinitas, ou seja, enquanto a condição for verdeira 0
código interno será repetido infinitamente.

_____________________________________________________________________________________________________________________

Executando o JavaScript junto com o HTML5

-Execução interno no próprio documento HTML5
-Link com um documento JS (preferenciamente)
_____________________________________________________________________________________________________________________

POO (Programação orientada a objetos)
 
Objeto -> estrutura de dados

Conceito relacionado a estrutura de dados:
CRUD (Create Read Update Delete)
São as 4 operações básicas que podemos realizar com a estrutura de dados:

Create: Inserção de dados na estrutura.
Read: Pesquisa de dados na estrutura.
Update: Alteração de dados na estrutura.
Delete: Exclusão de dados.

Pilares da programção orientada  objetos:
// Reutilização
Abstração
Herança
Polimorfismo

// Segurança
Encapsulamento

Obsevações:
Toda classe modelo obrigatóriamente deve iniciar com a letra maiúscula

 
Abstração
Herança 
Polimorfismo
Encapsulamento


